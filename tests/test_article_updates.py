"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import tempfile

import pytest

from src.core.database.database_manager import DatabaseManager
from src.utils import format_word_display


class TestArticleUpdates:
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä—Ç–∏–∫–ª–µ–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""

    @pytest.fixture
    def temp_db_manager(self):
        """–°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".db")
        temp_file.close()

        db_manager = DatabaseManager(temp_file.name)
        db_manager.init_database()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "telegram_id": 12345,
            "first_name": "Test",
            "last_name": "User",
            "username": "testuser",
        }
        user = db_manager.create_user(**user_data)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä—Ç–∏–∫–ª—è–º–∏
        test_words = [
            # –°–ª–æ–≤–∞ –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ (–±–µ–∑ –∞—Ä—Ç–∏–∫–ª—è)
            {"lemma": "Eltern", "part_of_speech": "noun", "article": None, "translation": "—Ä–æ–¥–∏—Ç–µ–ª–∏", "example": "Meine Eltern sind nett."},
            {"lemma": "Geschwister", "part_of_speech": "noun", "article": None, "translation": "–±—Ä–∞—Ç—å—è –∏ —Å–µ—Å—Ç—Ä—ã", "example": "Meine Geschwister sind √§lter."},
            {"lemma": "Gro√üeltern", "part_of_speech": "noun", "article": None, "translation": "–¥–µ–¥—É—à–∫–∞ –∏ –±–∞–±—É—à–∫–∞", "example": "Meine Gro√üeltern besuchen uns."},
            {"lemma": "Pommes", "part_of_speech": "noun", "article": None, "translation": "—Ñ—Ä–∏", "example": "Ich esse gern Pommes."},

            # –°–ª–æ–≤–∞ —Å –∞—Ä—Ç–∏–∫–ª—è–º–∏
            {"lemma": "Haus", "part_of_speech": "noun", "article": "das", "translation": "–¥–æ–º", "example": "Das Haus ist gro√ü."},
            {"lemma": "Mann", "part_of_speech": "noun", "article": "der", "translation": "–º—É–∂—á–∏–Ω–∞", "example": "Der Mann liest."},
            {"lemma": "Frau", "part_of_speech": "noun", "article": "die", "translation": "–∂–µ–Ω—â–∏–Ω–∞", "example": "Die Frau arbeitet."},
            {"lemma": "Teppich", "part_of_speech": "noun", "article": "der", "translation": "–∫–æ–≤—ë—Ä", "example": "Der Teppich ist sch√∂n."},
        ]

        user_id = user["id"]
        added_count = db_manager.add_words_to_user(user_id, test_words)
        assert added_count == len(test_words)

        yield db_manager, user_id

        # –û—á–∏—Å—Ç–∫–∞
        os.unlink(temp_file.name)

    def test_plural_nouns_without_articles(self, temp_db_manager):
        """–¢–µ—Å—Ç —á—Ç–æ —Å–ª–æ–≤–∞ –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –±–µ–∑ –∞—Ä—Ç–∏–∫–ª–µ–π"""
        db_manager, user_id = temp_db_manager

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ
        plural_words = ["Eltern", "Geschwister", "Gro√üeltern", "Pommes"]

        words = db_manager.get_words_by_user(user_id)

        for word in words:
            if word["lemma"] in plural_words:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞—Ä—Ç–∏–∫–ª—å None
                assert word["article"] is None, f"{word['lemma']} –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å article = None"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ utils.py
                formatted = format_word_display(word)
                assert "None" not in formatted, f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'None': {formatted}"
                assert f"üá©üá™ {word['lemma']}" in formatted, f"–î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–º—è —Å–ª–æ–≤–∞: {formatted}"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ session manager
                article = word.get('article')
                if article and article != 'None' and article.strip():
                    word_display = f"{article} {word['lemma']} - {word['part_of_speech']}"
                else:
                    word_display = f"{word['lemma']} - {word['part_of_speech']}"

                assert word_display == f"{word['lemma']} - noun", f"Session manager –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–µ–∑ –∞—Ä—Ç–∏–∫–ª—è: {word_display}"
                assert "None" not in word_display, f"Session manager –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å 'None': {word_display}"

    def test_singular_nouns_with_articles(self, temp_db_manager):
        """–¢–µ—Å—Ç —á—Ç–æ —Å–ª–æ–≤–∞ –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å –∞—Ä—Ç–∏–∫–ª—è–º–∏"""
        db_manager, user_id = temp_db_manager

        # –û–∂–∏–¥–∞–µ–º—ã–µ –∞—Ä—Ç–∏–∫–ª–∏
        expected_articles = {
            "Haus": "das",
            "Mann": "der",
            "Frau": "die",
            "Teppich": "der"
        }

        words = db_manager.get_words_by_user(user_id)

        for word in words:
            if word["lemma"] in expected_articles:
                expected_article = expected_articles[word["lemma"]]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞—Ä—Ç–∏–∫–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                assert word["article"] == expected_article, f"{word['lemma']} –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –∞—Ä—Ç–∏–∫–ª—å {expected_article}, –Ω–æ –∏–º–µ–µ—Ç {word['article']}"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ utils.py
                formatted = format_word_display(word)
                assert f"üá©üá™ {expected_article} {word['lemma']}" in formatted, f"–î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∞—Ä—Ç–∏–∫–ª—å: {formatted}"
                assert "None" not in formatted, f"–ù–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'None': {formatted}"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ session manager
                article = word.get('article')
                if article and article != 'None' and article.strip():
                    word_display = f"{article} {word['lemma']} - {word['part_of_speech']}"
                else:
                    word_display = f"{word['lemma']} - {word['part_of_speech']}"

                expected_display = f"{expected_article} {word['lemma']} - noun"
                assert word_display == expected_display, f"Session manager –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å –∞—Ä—Ç–∏–∫–ª–µ–º: {word_display}"

    def test_database_consistency_after_updates(self, temp_db_manager):
        """–¢–µ—Å—Ç —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–µ—Ç—Å—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        db_manager, user_id = temp_db_manager

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ
        with db_manager.get_connection() as conn:
            cursor = conn.execute(
                "SELECT lemma, article FROM words WHERE part_of_speech = 'noun'"
            )
            nouns = cursor.fetchall()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –∞—Ä—Ç–∏–∫–ª–µ–π 'None' (—Å—Ç—Ä–æ–∫–∞)
        for lemma, article in nouns:
            assert article != 'None', f"–°–ª–æ–≤–æ {lemma} –Ω–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –∞—Ä—Ç–∏–∫–ª—å 'None' (—Å—Ç—Ä–æ–∫–∞)"

            # –ï—Å–ª–∏ –∞—Ä—Ç–∏–∫–ª—å –µ—Å—Ç—å, —Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
            if article is not None:
                assert article in ["der", "die", "das"], f"–°–ª–æ–≤–æ {lemma} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫–ª—å: {article}"

    def test_word_display_formatting_consistency(self, temp_db_manager):
        """–¢–µ—Å—Ç —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ –≤–æ –≤—Å–µ—Ö –º–µ—Å—Ç–∞—Ö"""
        db_manager, user_id = temp_db_manager

        words = db_manager.get_words_by_user(user_id)

        for word in words:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º format_word_display
            formatted_utils = format_word_display(word)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º session manager –ª–æ–≥–∏–∫—É
            article = word.get('article')
            if article and article != 'None' and article.strip():
                session_display = f"{article} {word['lemma']} - {word['part_of_speech']}"
            else:
                session_display = f"{word['lemma']} - {word['part_of_speech']}"

            # –û–±–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'None'
            assert "None" not in formatted_utils, f"Utils formatting —Å–æ–¥–µ—Ä–∂–∏—Ç 'None': {formatted_utils}"
            assert "None" not in session_display, f"Session manager formatting —Å–æ–¥–µ—Ä–∂–∏—Ç 'None': {session_display}"

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä—Ç–∏–∫–ª—å, –æ–±–∞ –¥–æ–ª–∂–Ω—ã –µ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
            if word.get('article'):
                assert word['article'] in formatted_utils, f"Utils –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞—Ä—Ç–∏–∫–ª—å {word['article']}: {formatted_utils}"
                assert word['article'] in session_display, f"Session manager –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞—Ä—Ç–∏–∫–ª—å {word['article']}: {session_display}"

    def test_specific_corrected_words(self, temp_db_manager):
        """–¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"""
        db_manager, user_id = temp_db_manager

        # –°–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã (—Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å None)
        corrected_words = {
            "Eltern": None,
            "Geschwister": None,
            "Gro√üeltern": None,
            "Pommes": None
        }

        words = db_manager.get_words_by_user(user_id)

        for word in words:
            if word["lemma"] in corrected_words:
                expected_article = corrected_words[word["lemma"]]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞—Ä—Ç–∏–∫–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
                assert word["article"] == expected_article, f"{word['lemma']} –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –∞—Ä—Ç–∏–∫–ª—å {expected_article}, –Ω–æ –∏–º–µ–µ—Ç {word['article']}"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                formatted = format_word_display(word)
                assert "None" not in formatted, f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ {word['lemma']} –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å 'None': {formatted}"

    def test_edge_cases_with_articles(self, temp_db_manager):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å –∞—Ä—Ç–∏–∫–ª—è–º–∏"""
        db_manager, user_id = temp_db_manager

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∞—Ä—Ç–∏–∫–ª–µ–π
        edge_cases = [
            {"lemma": "TestEmpty", "article": "", "expected_display": "TestEmpty - noun"},
            {"lemma": "TestNull", "article": None, "expected_display": "TestNull - noun"},
            {"lemma": "TestSpace", "article": "   ", "expected_display": "TestSpace - noun"},
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ–≤–∞
        with db_manager.get_connection() as conn:
            for case in edge_cases:
                cursor = conn.execute(
                    "INSERT INTO words (lemma, part_of_speech, article, translation, example) VALUES (?, ?, ?, ?, ?)",
                    (case["lemma"], "noun", case["article"], "—Ç–µ—Å—Ç", "Test example.")
                )
                word_id = cursor.lastrowid

                # –î–æ–±–∞–≤–ª—è–µ–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                conn.execute(
                    "INSERT INTO learning_progress (user_id, word_id) VALUES (?, ?)",
                    (user_id, word_id)
                )
            conn.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        words = db_manager.get_words_by_user(user_id)

        for word in words:
            for case in edge_cases:
                if word["lemma"] == case["lemma"]:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º session manager –ª–æ–≥–∏–∫—É
                    article = word.get('article')
                    if article and article != 'None' and article.strip():
                        word_display = f"{article} {word['lemma']} - {word['part_of_speech']}"
                    else:
                        word_display = f"{word['lemma']} - {word['part_of_speech']}"

                    assert word_display == case["expected_display"], f"–ì—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π {case['lemma']}: –æ–∂–∏–¥–∞–ª–æ—Å—å {case['expected_display']}, –ø–æ–ª—É—á–µ–Ω–æ {word_display}"
                    assert "None" not in word_display, f"–ì—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'None': {word_display}"

    def test_real_world_scenario_multiple_users(self, temp_db_manager):
        """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        db_manager, first_user_id = temp_db_manager

        # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "telegram_id": 67890,
            "first_name": "Second",
            "last_name": "User",
            "username": "seconduser",
        }
        second_user = db_manager.create_user(**user_data)
        second_user_id = second_user["id"]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ –∂–µ —Å–ª–æ–≤–∞ –≤—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        test_words = [
            {"lemma": "Kinder", "part_of_speech": "noun", "article": None, "translation": "–¥–µ—Ç–∏", "example": "Die Kinder spielen."},
            {"lemma": "Auto", "part_of_speech": "noun", "article": "das", "translation": "–º–∞—à–∏–Ω–∞", "example": "Das Auto ist schnell."},
        ]

        added_count = db_manager.add_words_to_user(second_user_id, test_words)
        assert added_count == len(test_words)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∏–¥—è—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ä—Ç–∏–∫–ª–∏
        for user_id in [first_user_id, second_user_id]:
            words = db_manager.get_words_by_user(user_id)

            for word in words:
                # –í—Å–µ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                formatted = format_word_display(word)
                assert "None" not in formatted, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Å–ª–æ–≤–æ {word['lemma']}: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'None'"

                # Session manager —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                article = word.get('article')
                if article and article != 'None' and article.strip():
                    word_display = f"{article} {word['lemma']} - {word['part_of_speech']}"
                else:
                    word_display = f"{word['lemma']} - {word['part_of_speech']}"

                assert "None" not in word_display, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Å–ª–æ–≤–æ {word['lemma']}: session display —Å–æ–¥–µ—Ä–∂–∏—Ç 'None'"
