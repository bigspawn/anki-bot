"""
Command handlers for the German Learning Bot
"""

import logging
from typing import Dict, Any, Optional

from telegram import Update
from telegram.ext import ContextTypes

from ...database import DatabaseManager
from ...word_processor import WordProcessor
from ...text_parser import GermanTextParser
from ...spaced_repetition import SpacedRepetitionSystem
from ...utils import format_progress_stats

logger = logging.getLogger(__name__)


class CommandHandlers:
    """Handles all bot commands"""

    def __init__(
        self,
        db_manager: DatabaseManager,
        word_processor: WordProcessor,
        text_parser: GermanTextParser,
        srs_system: SpacedRepetitionSystem,
        safe_reply_callback,
        process_text_callback,
        start_study_session_callback,
    ):
        self.db_manager = db_manager
        self.word_processor = word_processor
        self.text_parser = text_parser
        self.srs_system = srs_system
        self._safe_reply = safe_reply_callback
        self._process_text_for_user = process_text_callback
        self._start_study_session = start_study_session_callback

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        if not update.effective_user:
            return

        user = update.effective_user

        # Create or get user
        db_user = self.db_manager.get_user_by_telegram_id(user.id)
        if not db_user:
            db_user = self.db_manager.create_user(
                telegram_id=user.id,
                first_name=user.first_name,
                last_name=user.last_name,
                username=user.username,
            )

        welcome_message = f"""üéâ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ German Learning Bot! üá©üá™

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∏–∑—É—á–∞—Ç—å –Ω–µ–º–µ—Ü–∫–∏–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.

üî§ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–µ–º–µ—Ü–∫–∏–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add
2. –ò–∑—É—á–∞–π—Ç–µ —Å–ª–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /study
3. –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ —Å–ª–æ–≤–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

üìö <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/add &lt;—Ç–µ–∫—Å—Ç&gt; - –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
/study - –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–π –Ω–µ–º–µ—Ü–∫–∏–π —Ç–µ–∫—Å—Ç, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫—É —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!"""

        await self._safe_reply(update, welcome_message, parse_mode="HTML")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        if not update.effective_user:
            return
        help_message = """üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º German Learning Bot

üî§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤:</b>
/add &lt;—Ç–µ–∫—Å—Ç&gt; - –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ –Ω–µ–º–µ—Ü–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
–ü—Ä–∏–º–µ—Ä: /add Ich gehe heute in die Schule

üìö <b>–ò–∑—É—á–µ–Ω–∏–µ:</b>
/study - –ò–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤, –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é
/study_new - –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ (–µ—â—ë –Ω–µ –∏–∑—É—á–∞–ª–∏—Å—å)
/study_difficult - –°–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞ (–Ω–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏)

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
/stats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑—É—á–µ–Ω–∏—è
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤, —Å–ª–æ–≤–∞ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é, –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Å—Ä–µ–¥–Ω–∏–π —É—Å–ø–µ—Ö

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Å–µ—Å—Å–∏–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π –Ω–µ–º–µ—Ü–∫–∏–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫—É —Å–ª–æ–≤–∞!

üéØ <b>–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–æ–∫:</b>
‚ùå –°–Ω–æ–≤–∞ - –ù–µ –ø–æ–º–Ω—é (–ø–æ–≤—Ç–æ—Ä –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏)
‚ûñ –¢—Ä—É–¥–Ω–æ - –ü–æ–º–Ω—é —Å —Ç—Ä—É–¥–æ–º (–ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è)
‚ûï –•–æ—Ä–æ—à–æ - –ü–æ–º–Ω—é —Ö–æ—Ä–æ—à–æ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
‚úÖ –õ–µ–≥–∫–æ - –ü–æ–º–Ω—é –ª–µ–≥–∫–æ (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)

‚ùì –í–æ–ø—Ä–æ—Å—ã? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /help"""

        await self._safe_reply(update, help_message, parse_mode="HTML")

    async def add_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /add command"""
        if not update.effective_user:
            return

        user = update.effective_user

        if not context.args:
            await self._safe_reply(
                update,
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–µ–º–µ—Ü–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
                "–ü—Ä–∏–º–µ—Ä: /add Das Wetter ist heute sehr sch√∂n."
            )
            return

        text = " ".join(context.args)
        await self._process_text_for_user(update, text)

    async def study_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /study command"""
        if not update.effective_user:
            return

        user = update.effective_user

        # Get user from database
        db_user = self.db_manager.get_user_by_telegram_id(user.id)
        if not db_user:
            await self._safe_reply(
                update,
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return

        # Get due words
        due_words = self.db_manager.get_due_words(db_user["id"], limit=10)

        if not due_words:
            await self._safe_reply(
                update,
                "üéâ –û—Ç–ª–∏—á–Ω–æ! –£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–µ–π—á–∞—Å.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /study_new –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö."
            )
            return

        # Start study session
        await self._start_study_session(update, due_words, "regular")

    async def study_new_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """Handle /study_new command"""
        if not update.effective_user:
            return

        user = update.effective_user

        db_user = self.db_manager.get_user_by_telegram_id(user.id)
        if not db_user:
            await self._safe_reply(
                update,
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return

        new_words = self.db_manager.get_new_words(db_user["id"], limit=10)

        if not new_words:
            await self._safe_reply(
                update,
                "üìö –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞."
            )
            return

        await self._start_study_session(update, new_words, "new")

    async def study_difficult_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """Handle /study_difficult command"""
        if not update.effective_user:
            return

        user = update.effective_user

        db_user = self.db_manager.get_user_by_telegram_id(user.id)
        if not db_user:
            await self._safe_reply(
                update,
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return

        difficult_words = self.db_manager.get_difficult_words(db_user["id"], limit=10)

        if not difficult_words:
            await self._safe_reply(
                update,
                "üéØ –£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–∂–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /study –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è."
            )
            return

        await self._start_study_session(update, difficult_words, "difficult")

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /stats command"""
        if not update.effective_user:
            return

        user = update.effective_user

        db_user = self.db_manager.get_user_by_telegram_id(user.id)
        if not db_user:
            await self._safe_reply(
                update,
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return

        stats = self.db_manager.get_user_stats(db_user["id"])
        stats_message = format_progress_stats(stats)

        await self._safe_reply(update, stats_message)

    async def settings_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """Handle /settings command"""
        if not update.effective_user:
            return

        await self._safe_reply(
            update,
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n"
            "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Å–µ—Å—Å–∏–∏\n"
            "‚Ä¢ –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
            "‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å\n"
            "‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å –∏–∑—É—á–µ–Ω–∏—è"
        )