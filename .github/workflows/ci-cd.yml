name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Install dependencies
      run: |
        uv sync --dev
        
    - name: Run linting
      run: |
        uv run ruff check src/ tests/ --output-format=github
        
    - name: Run type checking
      run: |
        uv run mypy src/ --ignore-missing-imports
        
    - name: Run tests
      env:
        TELEGRAM_BOT_TOKEN: test_token
        OPENAI_API_KEY: test_key
      run: |
        uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=term
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      if: success()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern=v{{version}}
          type=semver,pattern=v{{major}}.{{minor}}
          type=semver,pattern=v{{major}}
          type=sha
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        CURRENT_TAG=${GITHUB_REF#refs/tags/}
        
        # Generate changelog
        if [ -n "$PREV_TAG" ]; then
          echo "## Changes in $CURRENT_TAG" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release $CURRENT_TAG" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "- Initial release of German Learning Telegram Bot" >> CHANGELOG.md
        fi
        
        # Set output for later steps
        {
          echo 'changelog<<EOF'
          cat CHANGELOG.md
          echo EOF
        } >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ github.ref_name }}
        body: |
          ${{ steps.changelog.outputs.changelog }}
          
          ## Docker Images
          
          This release includes multi-architecture Docker images:
          
          ```bash
          # Pull the image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          
          # Run with docker-compose
          # 1. Download docker-compose.yml from this release
          # 2. Create .env file with your tokens
          # 3. Run: docker-compose up -d
          ```
          
          ## Quick Start
          
          ### With Docker Compose
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/docker-compose.yml
          cp .env.example .env
          # Edit .env with your TELEGRAM_BOT_TOKEN and OPENAI_API_KEY
          docker-compose up -d
          ```
          
          ### With Docker
          ```bash
          docker run -d --name german-bot \
            -e TELEGRAM_BOT_TOKEN=your_token \
            -e OPENAI_API_KEY=your_key \
            -v ./data:/app/data \
            -v ./logs:/app/logs \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          ```
          
        files: |
          docker-compose.yml
          .env.example
        draft: false
        prerelease: false